'use client';
import { useState, useEffect } from 'react';
import { Shield, Copy, Check, Eye, EyeOff, Plus, Search, Trash2, Edit, Moon, Sun, Key } from 'lucide-react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Slider } from '@/components/ui/slider';
import { Switch } from '@/components/ui/switch';
import { Card, CardContent, CardHeader, CardTitle, CardDescription } from '@/components/ui/card';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogDescription, DialogFooter } from '@/components/ui/dialog';
import { useToast } from '@/hooks/use-toast';
import { Toaster } from '@/components/ui/sonner';
import { generatePassword, calculatePasswordStrength } from '@/lib/passwordGenerator';
import { encryptData, decryptData } from '@/lib/crypto';
export default function App() {const{toast}=useToast();const[darkMode,setDarkMode]=useState(false);const[isLoggedIn,setIsLoggedIn]=useState(false);const[authMode,setAuthMode]=useState('login');const[email,setEmail]=useState('');const[password,setPassword]=useState('');const[masterPassword,setMasterPassword]=useState('');const[token,setToken]=useState('');const[generatedPassword,setGeneratedPassword]=useState('');const[passwordLength,setPasswordLength]=useState(16);const[includeLowercase,setIncludeLowercase]=useState(true);const[includeUppercase,setIncludeUppercase]=useState(true);const[includeNumbers,setIncludeNumbers]=useState(true);const[includeSymbols,setIncludeSymbols]=useState(true);const[excludeLookalikes,setExcludeLookalikes]=useState(true);const[copied,setCopied]=useState(false);const[vaultItems,setVaultItems]=useState([]);const[searchQuery,setSearchQuery]=useState('');const[showAddDialog,setShowAddDialog]=useState(false);const[editingItem,setEditingItem]=useState(null);const[showPasswordId,setShowPasswordId]=useState(null);const[formData,setFormData]=useState({title:'',username:'',password:'',url:'',notes:''});useEffect(()=>{const storedToken=localStorage.getItem('token');const storedMasterPassword=localStorage.getItem('masterPassword');if(storedToken&&storedMasterPassword){setToken(storedToken);setMasterPassword(storedMasterPassword);setIsLoggedIn(true);fetchVaultItems(storedToken)}if(darkMode){document.documentElement.classList.add('dark')}else{document.documentElement.classList.remove('dark')}},[darkMode]);useEffect(()=>{handleGeneratePassword()},[]);const handleGeneratePassword=()=>{try{const pwd=generatePassword({length:passwordLength,includeLowercase,includeUppercase,includeNumbers,includeSymbols,excludeLookalikes});setGeneratedPassword(pwd)}catch(error){toast({title:'Error',description:error.message,variant:'destructive'})}};const handleCopyPassword=async(password)=>{try{await navigator.clipboard.writeText(password);setCopied(true);toast({title:'Copied!',description:'Password copied. Auto-clear in 15 seconds.'});setTimeout(async()=>{await navigator.clipboard.writeText('');setCopied(false)},15000)}catch(error){toast({title:'Error',description:'Failed to copy',variant:'destructive'})}};const handleAuth=async(e)=>{e.preventDefault();try{const endpoint=authMode==='login'?'/api/auth/login':'/api/auth/signup';const response=await fetch(endpoint,{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify({email,password})});const data=await response.json();if(!response.ok)throw new Error(data.error||'Authentication failed');setToken(data.token);setMasterPassword(password);setIsLoggedIn(true);localStorage.setItem('token',data.token);localStorage.setItem('masterPassword',password);toast({title:'Success!',description:authMode==='login'?'Logged in':'Account created'});fetchVaultItems(data.token);setPassword('')}catch(error){toast({title:'Error',description:error.message,variant:'destructive'})}};const fetchVaultItems=async(authToken,search='')=>{try{const url=search?`/api/vault?search=${encodeURIComponent(search)}`:'/api/vault';const response=await fetch(url,{headers:{'Authorization':`Bearer ${authToken}`}});const data=await response.json();if(!response.ok)throw new Error(data.error||'Failed to fetch');setVaultItems(data.items)}catch(error){toast({title:'Error',description:error.message,variant:'destructive'})}};const handleSaveVaultItem=async(e)=>{e.preventDefault();try{const encryptedData=encryptData(formData,masterPassword);const payload={title:formData.title,username:formData.username,url:formData.url,encryptedData};if(editingItem){const response=await fetch(`/api/vault/${editingItem.itemId}`,{method:'PUT',headers:{'Content-Type':'application/json','Authorization':`Bearer ${token}`},body:JSON.stringify(payload)});if(!response.ok)throw new Error('Failed to update')}else{const response=await fetch('/api/vault',{method:'POST',headers:{'Content-Type':'application/json','Authorization':`Bearer ${token}`},body:JSON.stringify(payload)});if(!response.ok)throw new Error('Failed to create')}toast({title:'Success!',description:editingItem?'Item updated':'Item saved'});setShowAddDialog(false);setEditingItem(null);setFormData({title:'',username:'',password:'',url:'',notes:''});fetchVaultItems(token,searchQuery)}catch(error){toast({title:'Error',description:error.message,variant:'destructive'})}};const handleEditItem=(item)=>{try{const decryptedData=decryptData(item.encryptedData,masterPassword);setFormData(decryptedData);setEditingItem(item);setShowAddDialog(true)}catch(error){toast({title:'Error',description:'Failed to decrypt',variant:'destructive'})}};const handleDeleteItem=async(itemId)=>{if(!confirm('Delete?'))return;try{const response=await fetch(`/api/vault/${itemId}`,{method:'DELETE',headers:{'Authorization':`Bearer ${token}`}});if(!response.ok)throw new Error('Failed to delete');toast({title:'Success!',description:'Item deleted'});fetchVaultItems(token,searchQuery)}catch(error){toast({title:'Error',description:error.message,variant:'destructive'})}};const handleLogout=()=>{setIsLoggedIn(false);setToken('');setMasterPassword('');setVaultItems([]);localStorage.removeItem('token');localStorage.removeItem('masterPassword');toast({title:'Logged out'})};const handleSearch=(query)=>{setSearchQuery(query);if(token)fetchVaultItems(token,query)};const handleUseGeneratedPassword=()=>{setFormData({...formData,password:generatedPassword});toast({title:'Password added'})};const getDecryptedPassword=(item)=>{try{const decryptedData=decryptData(item.encryptedData,masterPassword);return decryptedData.password}catch(error){return'***'}};const passwordStrength=calculatePasswordStrength(generatedPassword);if(!isLoggedIn){return(<div className={`min-h-screen flex items-center justify-center bg-gradient-to-br from-blue-50 to-indigo-100 ${darkMode?'dark':''}`}><Card className="w-full max-w-md mx-4"><CardHeader><div className="flex items-center justify-center mb-4"><Shield className="h-12 w-12 text-indigo-600"/></div><CardTitle className="text-2xl text-center">PassGuard</CardTitle><CardDescription className="text-center">Secure Password Generator + Vault</CardDescription></CardHeader><CardContent><Tabs value={authMode} onValueChange={setAuthMode}><TabsList className="grid w-full grid-cols-2"><TabsTrigger value="login">Login</TabsTrigger><TabsTrigger value="signup">Sign Up</TabsTrigger></TabsList><TabsContent value="login"><form onSubmit={handleAuth} className="space-y-4 mt-4"><div className="space-y-2"><Label htmlFor="email">Email</Label><Input id="email" type="email" placeholder="your@email.com" value={email} onChange={(e)=>setEmail(e.target.value)} required/></div><div className="space-y-2"><Label htmlFor="password">Master Password</Label><Input id="password" type="password" placeholder="Your master password" value={password} onChange={(e)=>setPassword(e.target.value)} required/></div><Button type="submit" className="w-full">Login</Button></form></TabsContent><TabsContent value="signup"><form onSubmit={handleAuth} className="space-y-4 mt-4"><div className="space-y-2"><Label htmlFor="signup-email">Email</Label><Input id="signup-email" type="email" placeholder="your@email.com" value={email} onChange={(e)=>setEmail(e.target.value)} required/></div><div className="space-y-2"><Label htmlFor="signup-password">Master Password</Label><Input id="signup-password" type="password" placeholder="Create master password" value={password} onChange={(e)=>setPassword(e.target.value)} required/><p className="text-xs text-muted-foreground">Encrypts your vault!</p></div><Button type="submit" className="w-full">Create Account</Button></form></TabsContent></Tabs></CardContent></Card><Toaster/></div>)}return(<div className={`min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100 ${darkMode?'dark bg-gradient-to-br dark:from-gray-900 dark:to-gray-800':''}`}><header className="border-b bg-white/50 dark:bg-gray-900/50 backdrop-blur-sm"><div className="container mx-auto px-4 py-4 flex items-center justify-between"><div className="flex items-center space-x-2"><Shield className="h-8 w-8 text-indigo-600"/><h1 className="text-2xl font-bold">PassGuard</h1></div><div className="flex items-center space-x-4"><Button variant="ghost" size="icon" onClick={()=>setDarkMode(!darkMode)}>{darkMode?<Sun className="h-5 w-5"/>:<Moon className="h-5 w-5"/>}</Button><Button variant="outline" onClick={handleLogout}>Logout</Button></div></div></header><main className="container mx-auto px-4 py-8"><Tabs defaultValue="generator" className="space-y-6"><TabsList className="grid w-full max-w-md mx-auto grid-cols-2"><TabsTrigger value="generator">Password Generator</TabsTrigger><TabsTrigger value="vault">Vault</TabsTrigger></TabsList><TabsContent value="generator" className="space-y-6"><Card className="max-w-2xl mx-auto"><CardHeader><CardTitle>Generate Strong Password</CardTitle><CardDescription>Customizable secure passwords</CardDescription></CardHeader><CardContent className="space-y-6"><div className="space-y-2"><Label>Generated Password</Label><div className="flex space-x-2"><Input value={generatedPassword} readOnly className="font-mono text-lg"/><Button onClick={()=>handleCopyPassword(generatedPassword)} variant="outline" size="icon">{copied?<Check className="h-4 w-4"/>:<Copy className="h-4 w-4"/>}</Button></div><div className="flex items-center space-x-2"><div className="flex-1 h-2 bg-gray-200 rounded-full overflow-hidden"><div className={`h-full ${passwordStrength.color} transition-all`} style={{width:`${((passwordStrength.score+1)/5)*100}%`}}/></div><span className="text-sm font-medium">{passwordStrength.label}</span></div></div><div className="space-y-2"><Label>Length:{passwordLength}</Label><Slider value={[passwordLength]} onValueChange={(value)=>setPasswordLength(value[0])} min={8} max={64} step={1}/></div><div className="space-y-4"><div className="flex items-center justify-between"><Label htmlFor="lowercase">Lowercase (a-z)</Label><Switch id="lowercase" checked={includeLowercase} onCheckedChange={setIncludeLowercase}/></div><div className="flex items-center justify-between"><Label htmlFor="uppercase">Uppercase (A-Z)</Label><Switch id="uppercase" checked={includeUppercase} onCheckedChange={setIncludeUppercase}/></div><div className="flex items-center justify-between"><Label htmlFor="numbers">Numbers (0-9)</Label><Switch id="numbers" checked={includeNumbers} onCheckedChange={setIncludeNumbers}/></div><div className="flex items-center justify-between"><Label htmlFor="symbols">Symbols (!@#$%)</Label><Switch id="symbols" checked={includeSymbols} onCheckedChange={setIncludeSymbols}/></div><div className="flex items-center justify-between"><Label htmlFor="lookalikes">Exclude Look-alikes</Label><Switch id="lookalikes" checked={excludeLookalikes} onCheckedChange={setExcludeLookalikes}/></div></div><Button onClick={handleGeneratePassword} className="w-full"><Key className="mr-2 h-4 w-4"/>Generate New Password</Button></CardContent></Card></TabsContent><TabsContent value="vault" className="space-y-6"><div className="flex justify-between items-center"><div className="relative flex-1 max-w-md"><Search className="absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-muted-foreground"/><Input placeholder="Search vault..." value={searchQuery} onChange={(e)=>handleSearch(e.target.value)} className="pl-10"/></div><Button onClick={()=>setShowAddDialog(true)}><Plus className="mr-2 h-4 w-4"/>Add Item</Button></div>{vaultItems.length===0?(<Card className="max-w-2xl mx-auto"><CardContent className="pt-6 text-center text-muted-foreground"><Shield className="h-12 w-12 mx-auto mb-4 opacity-50"/><p>Your vault is empty. Add your first password!</p></CardContent></Card>):(<div className="grid gap-4 md:grid-cols-2 lg:grid-cols-3">{vaultItems.map((item)=>(<Card key={item.itemId}><CardHeader><CardTitle className="text-lg">{item.title}</CardTitle>{item.url&&<CardDescription className="truncate">{item.url}</CardDescription>}</CardHeader><CardContent className="space-y-3">{item.username&&(<div className="space-y-1"><Label className="text-xs text-muted-foreground">Username</Label><p className="text-sm">{item.username}</p></div>)}<div className="space-y-1"><Label className="text-xs text-muted-foreground">Password</Label><div className="flex space-x-2"><Input type={showPasswordId===item.itemId?'text':'password'} value={getDecryptedPassword(item)} readOnly className="font-mono text-sm"/><Button variant="outline" size="icon" onClick={()=>setShowPasswordId(showPasswordId===item.itemId?null:item.itemId)}>{showPasswordId===item.itemId?<EyeOff className="h-4 w-4"/>:<Eye className="h-4 w-4"/>}</Button><Button variant="outline" size="icon" onClick={()=>handleCopyPassword(getDecryptedPassword(item))}><Copy className="h-4 w-4"/></Button></div></div><div className="flex space-x-2"><Button variant="outline" size="sm" className="flex-1" onClick={()=>handleEditItem(item)}><Edit className="mr-2 h-4 w-4"/>Edit</Button><Button variant="destructive" size="sm" onClick={()=>handleDeleteItem(item.itemId)}><Trash2 className="h-4 w-4"/></Button></div></CardContent></Card>))}</div>)}</TabsContent></Tabs></main><Dialog open={showAddDialog} onOpenChange={setShowAddDialog}><DialogContent className="max-w-md"><DialogHeader><DialogTitle>{editingItem?'Edit Item':'Add New Item'}</DialogTitle><DialogDescription>All data encrypted before storage</DialogDescription></DialogHeader><form onSubmit={handleSaveVaultItem} className="space-y-4"><div className="space-y-2"><Label htmlFor="title">Title *</Label><Input id="title" placeholder="e.g., Gmail" value={formData.title} onChange={(e)=>setFormData({...formData,title:e.target.value})} required/></div><div className="space-y-2"><Label htmlFor="username">Username/Email</Label><Input id="username" placeholder="user@example.com" value={formData.username} onChange={(e)=>setFormData({...formData,username:e.target.value})}/></div><div className="space-y-2"><Label htmlFor="password">Password *</Label><div className="flex space-x-2"><Input id="password" type="password" placeholder="Password" value={formData.password} onChange={(e)=>setFormData({...formData,password:e.target.value})} required/><Button type="button" variant="outline" onClick={handleUseGeneratedPassword}>Use Generated</Button></div></div><div className="space-y-2"><Label htmlFor="url">URL</Label><Input id="url" placeholder="https://example.com" value={formData.url} onChange={(e)=>setFormData({...formData,url:e.target.value})}/></div><div className="space-y-2"><Label htmlFor="notes">Notes</Label><Input id="notes" placeholder="Additional notes" value={formData.notes} onChange={(e)=>setFormData({...formData,notes:e.target.value})}/></div><DialogFooter><Button type="button" variant="outline" onClick={()=>{setShowAddDialog(false);setEditingItem(null);setFormData({title:'',username:'',password:'',url:'',notes:''})}}>Cancel</Button><Button type="submit">{editingItem?'Update':'Save'}</Button></DialogFooter></form></DialogContent></Dialog><Toaster/></div>)}
